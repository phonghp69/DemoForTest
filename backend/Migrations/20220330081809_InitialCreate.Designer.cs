// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20220330081809_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("backend.Entities.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssetState")
                        .HasColumnType("int");

                    b.Property<string>("AssetStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssetId");

                    b.ToTable("Asset", (string)null);

                    b.HasData(
                        new
                        {
                            AssetId = 1,
                            AssetState = 2,
                            AssetStatus = ".......",
                            AssignmentId = 1,
                            CategoryId = 1,
                            Name = "mouse keyboard"
                        },
                        new
                        {
                            AssetId = 2,
                            AssetState = 0,
                            AssetStatus = ".......",
                            AssignmentId = 2,
                            CategoryId = 2,
                            Name = "name tags"
                        },
                        new
                        {
                            AssetId = 3,
                            AssetState = 1,
                            AssetStatus = ".......",
                            AssignmentId = 3,
                            CategoryId = 3,
                            Name = "flowers"
                        });
                });

            modelBuilder.Entity("backend.Entities.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssignedToUserId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("AssignedToUserId");

                    b.ToTable("Assignment", (string)null);

                    b.HasData(
                        new
                        {
                            AssignmentId = 1,
                            AssetId = 2,
                            AssignedByUserId = 1,
                            AssignedDate = new DateTime(2022, 3, 30, 15, 18, 9, 557, DateTimeKind.Local).AddTicks(2325),
                            AssignedToUserId = 2,
                            Note = "this is sample data",
                            RequestId = 0
                        });
                });

            modelBuilder.Entity("backend.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Perfix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Technology",
                            Perfix = "......"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Personal items",
                            Perfix = "......"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Other",
                            Perfix = "......"
                        });
                });

            modelBuilder.Entity("backend.Entities.ReturningRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("RequestState")
                        .HasColumnType("int");

                    b.Property<int?>("RequestedByUserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("RequestedByUserId");

                    b.ToTable("ReturningRequest", (string)null);

                    b.HasData(
                        new
                        {
                            RequestId = 1,
                            AssignmentId = 1,
                            ProcessedByUserId = 1,
                            RequestState = 1,
                            RequestedByUserId = 2
                        });
                });

            modelBuilder.Entity("backend.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoindedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FirstName = "Dao",
                            JoindedDate = new DateTime(2022, 3, 30, 15, 18, 9, 351, DateTimeKind.Local).AddTicks(4605),
                            LastName = "Quy Vuong",
                            PasswordHash = "$2a$11$xcADNau7DOYvBmobsDgrpeaMs2dPzOyncFgridC4T6EKu2mWNplGO",
                            Role = 0,
                            UserName = "Admin"
                        },
                        new
                        {
                            UserId = 2,
                            FirstName = "Bui",
                            JoindedDate = new DateTime(2022, 3, 30, 15, 18, 9, 557, DateTimeKind.Local).AddTicks(1822),
                            LastName = "Chi Huong",
                            PasswordHash = "$2a$11$Vr.yDlPZ0KiMFDN07YpwhuDjaXrbYUYyw98GjkRrzcoAwwIQcOBLa",
                            Role = 1,
                            UserName = "Staff"
                        });
                });

            modelBuilder.Entity("backend.Entities.Asset", b =>
                {
                    b.HasOne("backend.Entities.Category", "Category")
                        .WithOne("Asset")
                        .HasForeignKey("backend.Entities.Asset", "AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("backend.Entities.Assignment", b =>
                {
                    b.HasOne("backend.Entities.User", "AssignedBy")
                        .WithMany("AssignedBy")
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Entities.User", "AssignedTo")
                        .WithMany("AssignedTo")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Entities.Asset", "Asset")
                        .WithOne("Assignment")
                        .HasForeignKey("backend.Entities.Assignment", "AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Entities.ReturningRequest", "ReturningRequest")
                        .WithOne("Assignment")
                        .HasForeignKey("backend.Entities.Assignment", "AssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("AssignedBy");

                    b.Navigation("AssignedTo");

                    b.Navigation("ReturningRequest");
                });

            modelBuilder.Entity("backend.Entities.ReturningRequest", b =>
                {
                    b.HasOne("backend.Entities.User", "ProcessedBy")
                        .WithMany("Processed")
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend.Entities.User", "RequestedBy")
                        .WithMany("Requests")
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProcessedBy");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("backend.Entities.Asset", b =>
                {
                    b.Navigation("Assignment")
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Entities.Category", b =>
                {
                    b.Navigation("Asset")
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Entities.ReturningRequest", b =>
                {
                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("backend.Entities.User", b =>
                {
                    b.Navigation("AssignedBy");

                    b.Navigation("AssignedTo");

                    b.Navigation("Processed");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
